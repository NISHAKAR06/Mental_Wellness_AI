import { createContext, useContext, useState } from 'react';

type Language = 'en' | 'ta' | 'hi';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

const translations = {
  en: {
    // Navigation
    'nav.login': 'Login',
    'nav.register': 'Register',
    'nav.dashboard': 'Dashboard',
    'nav.logout': 'Logout',
    
    // Landing Page
    'hero.title': 'Generative AI for Youth Mental Wellness',
    'hero.subtitle': 'Empowering youth with AI-driven mental wellness support',
    'hero.cta': 'Get Started',
    'hero.description': 'Join our supportive community and access AI-powered tools designed specifically for youth mental health and wellbeing.',
    
    // Features
    'features.videoconf': 'Video Conferencing',
    'features.emotion': 'AI Emotion Monitoring',
    'features.summarizer': 'Session Summarizer',
    'features.gaming': 'AI-Powered Gaming',
    'features.peersupport': 'Peer Support Groups',
    'features.multilingual': 'Multilingual & Accessibility',
    'features.lifestyle': 'Lifestyle Tools',
    
    // Dashboard
    'dashboard.welcome': 'Welcome back, take a deep breath, you\'re safe here ЁЯМ┐',
    'dashboard.subtitle': 'Your mental wellness journey continues here',
    
    // Auth
    'auth.email': 'Email',
    'auth.password': 'Password',
    'auth.login': 'Sign In',
    'auth.register': 'Create Account',
    'auth.switchToRegister': 'Don\'t have an account? Sign up',
    'auth.switchToLogin': 'Already have an account? Sign in',
  },
  ta: {
    // Navigation
    'nav.login': 'роЙро│рпНроирпБро┤рпИроп',
    'nav.register': 'рокродро┐ро╡рпБ роЪрпЖропрпНроХ',
    'nav.dashboard': 'роорпБроХрокрпНрокрпБ рокро▓роХрпИ',
    'nav.logout': 'ро╡рпЖро│ро┐ропрпЗро▒рпБ',
    
    // Landing Page
    'hero.title': 'роЗро│рпИроЮро░рпН роорой роиро▓ройрпБроХрпНроХро╛рой роЙро▒рпНрокродрпНродро┐ роЪрпЖропро▒рпНроХрпИ роирпБрогрпНрогро▒ро┐ро╡рпБ',
    'hero.subtitle': 'AI-роЗропроХрпНроХрокрпНрокроЯрпБроорпН роорой роиро▓ роЖродро░ро╡рпЛроЯрпБ роЗро│рпИроЮро░рпНроХро│рпИ ро╡ро▓рпБрокрпНрокроЯрпБродрпНродрпБродро▓рпН',
    'hero.cta': 'родрпКроЯроЩрпНроХро╡рпБроорпН',
    'hero.description': 'роОроЩрпНроХро│рпН роЖродро░ро╡ро╛рой роЪроорпВроХродрпНродро┐ро▓рпН роЪрпЗро░ро╡рпБроорпН рооро▒рпНро▒рпБроорпН роЗро│рпИроЮро░рпН роорой роиро▓роорпН рооро▒рпНро▒рпБроорпН роиро▓ройрпБроХрпНроХро╛роХ роЪро┐ро▒рокрпНрокро╛роХ ро╡роЯро┐ро╡роорпИроХрпНроХрокрпНрокроЯрпНроЯ AI-роЗропроЩрпНроХрпБроорпН роХро░рпБро╡ро┐роХро│рпИ роЕрогрпБроХро╡рпБроорпН.',
    
    // Features  
    'features.videoconf': 'ро╡рпАроЯро┐ропрпЛ рооро╛роиро╛роЯрпБ',
    'features.emotion': 'AI роЙрогро░рпНро╡рпБ роХрогрпНроХро╛рогро┐рокрпНрокрпБ',
    'features.summarizer': 'роЕрооро░рпНро╡рпБ роЪрпБро░рпБроХрпНроХроорпН',
    'features.gaming': 'AI-роЗропроЩрпНроХрпБроорпН ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ',
    'features.peersupport': 'роЪроХ роЖродро░ро╡рпБ роХрпБро┤рпБроХрпНроХро│рпН',
    'features.multilingual': 'рокро▓ роорпКро┤ро┐ & роЕрогрпБроХро▓рпНродройрпНроорпИ',
    'features.lifestyle': 'ро╡ро╛ро┤рпНроХрпНроХрпИ роорпБро▒рпИ роХро░рпБро╡ро┐роХро│рпН',
    
    // Dashboard
    'dashboard.welcome': 'роорпАрогрпНроЯрпБроорпН ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН, роЖро┤рооро╛роХ роорпВроЪрпНроЪрпБ ро╡ро┐роЯрпБроЩрпНроХро│рпН, роирпАроЩрпНроХро│рпН роЗроЩрпНроХрпЗ рокро╛родрпБроХро╛рокрпНрокро╛роХ роЗро░рпБроХрпНроХро┐ро▒рпАро░рпНроХро│рпН ЁЯМ┐',
    'dashboard.subtitle': 'роЙроЩрпНроХро│рпН роорой роиро▓ рокропрогроорпН роЗроЩрпНроХрпЗ родрпКроЯро░рпНроХро┐ро▒родрпБ',
    
    // Auth
    'auth.email': 'рооро┐ройрпНройроЮрпНроЪро▓рпН',
    'auth.password': 'роХроЯро╡рпБроЪрпНроЪрпКро▓рпН',
    'auth.login': 'роЙро│рпНроирпБро┤рпИроп',
    'auth.register': 'роХрогроХрпНроХрпБ роЙро░рпБро╡ро╛роХрпНроХрпБ',
    'auth.switchToRegister': 'роХрогроХрпНроХрпБ роЗро▓рпНро▓рпИропро╛? рокродро┐ро╡рпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН',
    'auth.switchToLogin': 'роПро▒рпНроХройро╡рпЗ роХрогроХрпНроХрпБ роЙро│рпНро│родро╛? роЙро│рпНроирпБро┤рпИропрпБроЩрпНроХро│рпН',
  },
  hi: {
    // Navigation
    'nav.login': 'рд▓реЙрдЧрд┐рди',
    'nav.register': 'рд░рдЬрд┐рд╕реНрдЯрд░',
    'nav.dashboard': 'рдбреИрд╢рдмреЛрд░реНрдб',
    'nav.logout': 'рд▓реЙрдЧрдЖрдЙрдЯ',
    
    // Landing Page
    'hero.title': 'рдпреБрд╡рд╛ рдорд╛рдирд╕рд┐рдХ рдХрд▓реНрдпрд╛рдг рдХреЗ рд▓рд┐рдП рдЬреЗрдиреЗрд░реЗрдЯрд┐рд╡ AI',
    'hero.subtitle': 'AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдорд╛рдирд╕рд┐рдХ рдХрд▓реНрдпрд╛рдг рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд╕рд╛рде рдпреБрд╡рд╛рдУрдВ рдХреЛ рд╕рд╢рдХреНрдд рдмрдирд╛рдирд╛',
    'hero.cta': 'рд╢реБрд░реВ рдХрд░реЗрдВ',
    'hero.description': 'рд╣рдорд╛рд░реЗ рд╕рд╣рд╛рдпрдХ рд╕рдореБрджрд╛рдп рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ рдФрд░ рдпреБрд╡рд╛ рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдФрд░ рдХрд▓реНрдпрд╛рдг рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢реЗрд╖ рд░реВрдк рд╕реЗ рдбрд┐рдЬрд╝рд╛рдЗрди рдХрд┐рдП рдЧрдП AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдЙрдкрдХрд░рдгреЛрдВ рддрдХ рдкрд╣реБрдВрдЪреЗрдВред',
    
    // Features
    'features.videoconf': 'рд╡реАрдбрд┐рдпреЛ рдХреЙрдиреНрдлреНрд░реЗрдВрд╕рд┐рдВрдЧ',
    'features.emotion': 'AI рднрд╛рд╡рдирд╛ рдирд┐рдЧрд░рд╛рдиреА',
    'features.summarizer': 'рд╕реЗрд╢рди рд╕рд╛рд░рд╛рдВрд╢',
    'features.gaming': 'AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдЧреЗрдорд┐рдВрдЧ',
    'features.peersupport': 'рд╕рд╣рдХрд░реНрдореА рд╕рд╣рд╛рдпрддрд╛ рд╕рдореВрд╣',
    'features.multilingual': 'рдмрд╣реБрднрд╛рд╖реА рдФрд░ рдкрд╣реБрдВрдЪ',
    'features.lifestyle': 'рдЬреАрд╡рдирд╢реИрд▓реА рдЙрдкрдХрд░рдг',
    
    // Dashboard
    'dashboard.welcome': 'рд╡рд╛рдкрд╕ рд╕реНрд╡рд╛рдЧрдд рд╣реИ, рдЧрд╣рд░реА рд╕рд╛рдВрд╕ рд▓реЗрдВ, рдЖрдк рдпрд╣рд╛рдБ рд╕реБрд░рдХреНрд╖рд┐рдд рд╣реИрдВ ЁЯМ┐',
    'dashboard.subtitle': 'рдЖрдкрдХреА рдорд╛рдирд╕рд┐рдХ рдХрд▓реНрдпрд╛рдг рдпрд╛рддреНрд░рд╛ рдпрд╣рд╛рдБ рдЬрд╛рд░реА рд╣реИ',
    
    // Auth
    'auth.email': 'рдИрдореЗрд▓',
    'auth.password': 'рдкрд╛рд╕рд╡рд░реНрдб',
    'auth.login': 'рд╕рд╛рдЗрди рдЗрди',
    'auth.register': 'рдЦрд╛рддрд╛ рдмрдирд╛рдПрдВ',
    'auth.switchToRegister': 'рдЦрд╛рддрд╛ рдирд╣реАрдВ рд╣реИ? рд╕рд╛рдЗрди рдЕрдк рдХрд░реЗрдВ',
    'auth.switchToLogin': 'рдкрд╣рд▓реЗ рд╕реЗ рдЦрд╛рддрд╛ рд╣реИ? рд╕рд╛рдЗрди рдЗрди рдХрд░реЗрдВ',
  },
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [language, setLanguage] = useState<Language>('en');

  const t = (key: string): string => {
    return translations[language][key as keyof typeof translations[typeof language]] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
}